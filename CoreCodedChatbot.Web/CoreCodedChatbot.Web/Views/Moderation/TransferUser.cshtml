@using CoreCodedChatbot.Web.ViewModels.Shared
@model CoreCodedChatbot.Web.ViewModels.Moderation.TransferUserViewModel
@{
    ViewData["Title"] = "Transfer User Account";
    Layout = "_Layout";
}

@section Styles {
    <link rel="stylesheet" href="~/css/transferuser.min.css"/>
}


@await Component.InvokeAsync("ConfirmationDialog", new ConfirmationDialogViewModel
{
    ModalId = "TransferUser",
    ModalTitle = $"Transfer data?",
    CloseButtonText = "Cancel",
    ConfirmationButtonText = "Transfer",
    BodyText = "Are you sure you want to transfer this user's data?",
    CloseFunctionName = "CancelModalAction",
    CloseButtonAction = "function CancelModalAction() { }",
    ConfirmFunctionName = "ConfirmModalAction(event)",
    ConfirmationButtonAction =
            "  function ConfirmModalAction(event) {debugger;$('#TransferUser-ConfirmButton').attr('disabled', true);$('[name = \"TransferForm\"]')[0].submit();}"
})

<div class="jumbotron">
    <h2>Transfer User Account</h2>
    <p style="color: red">@Html.ValidationMessage("TransferStatus")</p>
</div>

@{
    Html.BeginForm("ProcessTransferUser", "Moderation", new {}, FormMethod.Post, null, new {@name = "TransferForm"});
}

<div class="form-group">
    @Html.LabelFor(m => m.OldUsername)
    @Html.EditorFor(m => m.OldUsername, new {@class = "form-control"})
    @Html.ValidationMessageFor(m => m.OldUsername)
</div>
<div class="form-group">
    @Html.LabelFor(m => m.NewUsername)
    @Html.EditorFor(m => m.NewUsername, new { @class = "form-control" })
    @Html.ValidationMessageFor(m => m.NewUsername)
</div>
<br/>
<div class="row">
    <button id="submitButton" class="btn btn-primary" type="button" data-toggle="modal" data-target="#TransferUser">Submit</button>
</div>
@{
    Html.EndForm();
}
