@model CoreCodedChatbot.Web.ViewModels.NavigationViewModel.NavigationViewModel

<div class="navbar navbar-expand-lg bg-dark">
    <div class="container">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="False" aria-label="Show nav menu">
            <img src="images/ghost-72.png" id="nav-brand" />
        </button>
        <div class="collapse navbar-collapse" id="navbarResponsive">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    @Html.ActionLink("Home", "Index", "Home", new { }, new {@class = "nav-link"})
                </li>
                @if (Model.IsBroadcasterOnline)
                {
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="twitchDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            🔴 Live
                        </a>
                        <div class="dropdown-menu" aria-labelledby="twitchDropdown">
                            @Html.ActionLink("Info", "Index", "Chatbot", new {}, new {@class = "dropdown-item"})
                            @Html.ActionLink("Playlist", "List", "Chatbot", new {}, new {@class = "dropdown-item"})
                            @Html.ActionLink("Library", "Library", "Chatbot", new {}, new {@class = "dropdown-item"})
                            @Html.ActionLink("Practice Song Request", "RequestSong", "Development", new {}, new {@class = "dropdown-item"})
                            @Html.ActionLink("Synonym Request", "Synonym", "Chatbot", new {}, new {@class = "dropdown-item"})
                        </div>
                    </li>
                }
                @if (Model.UserIsMod)
                {
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="modDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="False">
                    Moderation
                </a>
                <div class="dropdown-menu" aria-labelledby="modDropdown">
                    @Html.ActionLink("Transfer User Account", "TransferUser", "Moderation", new { }, new { @class = "dropdown-item" })
                    @Html.ActionLink("Search", "Search", "Moderation", new {}, new {@class = "dropdown-item"})
                </div>
            </li>
                }
                <li class="nav-item">
                    @Html.ActionLink("Socials", "Index", "Socials", new {}, new {@class = "nav-link"})
                </li>
                <li class="nav-item">
                    @Html.ActionLink("Media", "Index", "Media", new {}, new {@class = "nav-link"})
                </li>
                @*<li class="nav-item">
                    @Html.ActionLink("Merch", "Index", "Merch", new {}, new {@class = "nav-link"})
                </li>*@
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="devDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="False">
                        Development
                    </a>
                    <div class="dropdown-menu" aria-labelledby="devDropdown">
                        @Html.ActionLink("Current Month", "Index", "Development", new {}, new {@class = "dropdown-item"})
                        @Html.ActionLink("Raise a Bug", "RaiseBug", "Development", new {}, new {@class = "dropdown-item"})
                        @Html.ActionLink("Backlog", "Backlog", "Development", new {}, new {@class = "dropdown-item"})
                    </div>
                </li>
                <li class="nav-item">
                    @Html.ActionLink("About", "Index", "About", new {}, new {@class = "nav-link"})
                </li>
            </ul>
            <span class="navbar-text">
                @if (User.Identity.IsAuthenticated)
                {
                    <button class="btn btn-primary" onclick="window.location.href = '@Url.Action("Logout", "Login", new { redirectUrl = Model.LoginLogoutRedirect})'">Logout</button>
                }
                else
                {
                    <button class="btn btn-primary" onclick="window.location.href = '@Url.Action("Index", "Login", new { redirectUrl = Model.LoginLogoutRedirect})'">Login with Twitch</button>
                }
            </span>
        </div>
    </div>
</div>